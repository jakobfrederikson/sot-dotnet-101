@page "/"
@inject HttpClient Http
@using FifaTeamMaker.Components

<PageTitle>Fifa Team Builder</PageTitle>

<Header>Fifa Team Builder ⚽️</Header>

<div class="flex justify-between gap-12">
    <div class="w-6/12">
        <div class="flex justify-between">
            <SectionTitle>Available players</SectionTitle>
            <div class="form-group items-end">
                <input class="form-control rounded-full drop-shadow-lg border-slate-900 pl-5 bg-opacity-40 bg-white" type="text" placeholder="Filter..."
                    @bind="Filter"
                    @bind:event="oninput">
            </div>
        </div>
        @if (AllTeams == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <Table>
                <thead>
                    <tr class="bg-slate-900">
                        <HeaderRow />
                        <HeaderRow>First name</HeaderRow>
                        <HeaderRow>Position</HeaderRow>
                        <HeaderRow>Country</HeaderRow>
                        <HeaderRow></HeaderRow>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var team in AllTeams) {
                        @foreach (var player in team.Players)
                        {
                            if(!IsVisible(team, player))
                                continue;
                            <tr class="hover:bg-slate-100">
                                <BodyRow><img class="h-40" src="@player.PlayerPicture.PictureUrl" /></BodyRow>
                                <BodyRow>@player.PlayerName.First().Description
                                </BodyRow>
                                <BodyRow>@player.RealPositionLocalized.First().Description</BodyRow>
                                <BodyRow>@team.TeamName.First().Description</BodyRow>
                                <BodyRow>
                                    <Button OnClick="() => AddPlayer(player, team.TeamName.First().Description)">+ Add</Button>
                                </BodyRow>
                            </tr>
                        }
                    }
                </tbody>
            </Table>
        }
    </div>

    <div class="w-6/12">
        <FifaTeamMaker.Components.SectionTitle>My team</FifaTeamMaker.Components.SectionTitle>
        @if (!team.Any())
        {
            <p class="p-4 bg-slate-200 w-full rounded-lg bg-opacity-40">No players yet 😭</p>
        }
        else
        {
            <Table>
                <thead>
                    <tr class="bg-slate-900">
                        <HeaderRow></HeaderRow>
                        <HeaderRow>Name</HeaderRow>
                        <HeaderRow>Position</HeaderRow>
                        <HeaderRow>Country</HeaderRow>
                        <HeaderRow></HeaderRow>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in team)
                    {
                        <tr>
                            <BodyRow><img class="h-40" src="@player.PlayerPicture.PictureUrl" /></BodyRow>
                            <BodyRow>@player.PlayerName.FirstOrDefault().Description</BodyRow>
                            <BodyRow>@player.RealPositionLocalized.First().Description</BodyRow>
                            <BodyRow>@player.Country</BodyRow>
                            <BodyRow>
                                <Button OnClick="() => RemovePlayer(player)">- Remove</Button>
                            </BodyRow>
                        </tr>
                    }
                </tbody>
            </Table>
        }
    </div>
</div>

@code {
    public class LocalizedString {
        public string Locale {get;set;}
        public string Description {get;set;}
    }

    public class PlayerPicture {
        public string PictureUrl {get;set;}
    }

    public class Player {
        public int IdPlayer {get;set;}
        public LocalizedString[] PlayerName {get;set;}
        public LocalizedString[] RealPositionLocalized {get;set;}
        public PlayerPicture PlayerPicture {get;set;}
        public string? Country {get;set;}
    }

    public class TeamObject {
        public LocalizedString[] TeamName {get;set;}
        public Player[] Players {get;set;}
    }

    private List<TeamObject> AllTeams = new();
    private List<Player> team = new();
    private Dictionary<string, string> teams = new Dictionary<string, string>(){
        {"argentina", "1884881"},
        {"australia", "1882891"},
        {"denmark", "1883719"},
        {"vietnam", "1886308"},
        {"costa-rica", "1884880"},
        {"spain", "1884823"},
        {"brazil", "1882881"},
        {"netherlands", "1884883"},
        {"south-africa", "1885031"},
        {"colombia", "1885035"},
        {"japan", "1883723"},
        {"italy", "1883722"},
        {"new-zealand", "1883725"},
        {"jamaica", "1885011"},
        {"england", "1883720"},
        {"switzerland", "1884203"},
        {"haiti", "1885012"},
        {"morocco", "1884821"},
        {"usa", "1882884"},
        {"france", "1884761"},
        {"norway", "1882882"},
        {"republic-of-ireland", "1884884"},
        {"sweden", "1882883"},
        {"zambia", "1885017"},
        {"portugal", "1884822"},
        {"china-pr", "1882892"},
        {"philippines", "1885027"},
        {"panama", "1889512"},
        {"germany", "1882879"},
        {"korea-republic", "1885010"},
        {"nigeria", "1882893"},
        {"canada", "1883718"},
    };
    public string Filter { get; set; }

    public bool IsVisible(TeamObject team, Player player)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
    
        if (player.PlayerName.First().Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (player.RealPositionLocalized.First().Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (team.TeamName.First().Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        var teamsFromApi = await Task.WhenAll(teams.Select(team => Http.GetFromJsonAsync<TeamObject>($"https://api.fifa.com/api/v3/teams/{team.Value}/squad?idCompetition=103&idSeason=285026&language=en")));
        AllTeams.AddRange(teamsFromApi.ToArray());
    }

    private void AddPlayer(Player player, string country)
    {
        if (!team.Any(x => x.IdPlayer == player.IdPlayer))
        {
            Player newPlayer = player;
            newPlayer.Country = country;
            team.Add(newPlayer);
        }
    }

    private void RemovePlayer(Player player)
    {
        if (team.Any(x => x.IdPlayer == player.IdPlayer))
        {
            team.Remove(player);
        }
    }
}
