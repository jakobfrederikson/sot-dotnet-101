@page "/"
@inject HttpClient Http

<PageTitle>Fifa Team Builder</PageTitle>

<Header>Fifa Team Builder ⚽</Header>

<div class="flex gap-10 justify-between">
    <div class="w-6/12">
        <div class="flex justify-between">
        <SectionTitle>Available players</SectionTitle>
        <div class="form-group items-end">
                <input class="rounded-full drop-shadow-lg border-slate-600 pl-5 bg-opacity-40 bg-white"
                    type="text"
                    placeholder="Filter..."
                    @bind="Filter"
                    @bind:event="oninput">
            </div>
            </div>
        <Table>
            <thead>
                <tr>
                    <HeaderCell></HeaderCell>
                    <HeaderCell>Name</HeaderCell>
                    <HeaderCell>Position</HeaderCell>
                    <HeaderCell>Country</HeaderCell>
                    <HeaderCell></HeaderCell>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in allTeams.SelectMany(team => team.Players))
                {
                    if(!IsVisible(player)) {
                        continue;
                    }
                    <tr>
                        <BodyCell><img class="h-40" src="@player.PlayerPicture.PictureUrl" /></BodyCell>
                        <BodyCell>@player.PlayerName.First().Description</BodyCell>
                        <BodyCell>@player.RealPositionLocalized.First().Description</BodyCell>
                        <BodyCell>@player.Country</BodyCell>
                        <BodyCell><Button OnClick="() => AddPlayer(player)">+ Add</Button></BodyCell>
                    </tr>
                }
            </tbody>
        </Table>
    </div>

    <div class="w-6/12">
        <SectionTitle>Dream team</SectionTitle>
        <Table>
            <thead>
                <tr>
                    <HeaderCell></HeaderCell>
                    <HeaderCell>Name</HeaderCell>
                    <HeaderCell>Position</HeaderCell>
                    <HeaderCell>Country</HeaderCell>
                    <HeaderCell></HeaderCell>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in dreamTeamPlayers)
                {
                    <tr>
                        <BodyCell><img class="w-28" src="@player.PlayerPicture.PictureUrl" /></BodyCell>
                        <BodyCell>@player.PlayerName.First().Description</BodyCell>
                        <BodyCell>@player.RealPositionLocalized.First().Description</BodyCell>
                        <BodyCell>@player.Country</BodyCell>
                        <BodyCell><Button OnClick="() => RemovePlayer(player)">🗑 Remove</Button></BodyCell>
                    </tr>
                }
            </tbody>
        </Table>
    </div>
</div>

@code {
    public string Filter { get; set; }
    private Dictionary<string, string> teams = new Dictionary<string, string>(){
        {"argentina", "1884881"},
        {"australia", "1882891"},
        {"denmark", "1883719"},
        {"vietnam", "1886308"},
        {"costa-rica", "1884880"},
        {"spain", "1884823"},
        {"brazil", "1882881"},
        {"netherlands", "1884883"},
        {"south-africa", "1885031"},
        {"colombia", "1885035"},
        {"japan", "1883723"},
        {"italy", "1883722"},
        {"new-zealand", "1883725"},
        {"jamaica", "1885011"},
        {"england", "1883720"},
        {"switzerland", "1884203"},
        {"haiti", "1885012"},
        {"morocco", "1884821"},
        {"usa", "1882884"},
        {"france", "1884761"},
        {"norway", "1882882"},
        {"republic-of-ireland", "1884884"},
        {"sweden", "1882883"},
        {"zambia", "1885017"},
        {"portugal", "1884822"},
        {"china-pr", "1882892"},
        {"philippines", "1885027"},
        {"panama", "1889512"},
        {"germany", "1882879"},
        {"korea-republic", "1885010"},
        {"nigeria", "1882893"},
        {"canada", "1883718"},
    };

    private List<TeamObject> allTeams = new();
    private List<Player>  dreamTeamPlayers = new();

    public class PlayerPicture {
        public string PictureUrl {get;set;}
    }

    public class LocalizedString {
        public string Locale {get;set;}
        public string Description {get;set;}
    }

    public class Player {
        public int IdPlayer {get;set;}
        public LocalizedString[] PlayerName {get;set;}
        public LocalizedString[] RealPositionLocalized {get;set;}
        public PlayerPicture PlayerPicture {get;set;}
        public string Country {get;set;}
    }

    public class TeamObject
    {
        public LocalizedString[] TeamName {get;set;}
        public List<Player> Players {get;set;}
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(teams.Select(async country => {
            var team = await Http.GetFromJsonAsync<TeamObject>($"https://api.fifa.com/api/v3/teams/{country.Value}/squad?idCompetition=103&idSeason=285026&language=en");
            team.Players.ForEach(player => 
            {
                player.Country = team.TeamName.First().Description;
            });
            allTeams.Add(team);
        }));
    }

    private void AddPlayer(Player player)
    {
        if (!dreamTeamPlayers.Any(x => x.IdPlayer == player.IdPlayer))
        {
            dreamTeamPlayers.Add(player);
        }
    }

    private void RemovePlayer(Player player)
    {
        if (dreamTeamPlayers.Any(x => x.IdPlayer == player.IdPlayer))
        {
            dreamTeamPlayers.Remove(player);
        }
    }

    public bool IsVisible(Player player)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
    
        if (player.PlayerName.First().Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (player.RealPositionLocalized.First().Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (player.Country.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
